# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class SMSControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    token = OAuth2.authorize config
    config = config().clone_with o_auth_token: token

    @response_catcher = HttpResponseCatcher.new
    @controller = SMSController.new config, http_call_back: @response_catcher
  end

  # The messages are queued on the ThingSpace Platform and sent as soon as possible, but they may be delayed due to traffic and routing considerations.
  def test_send_sms_to_device()
    # Parameters for the API call
    body = SMSSendRequest.from_hash(APIHelper.json_deserialize(
      '{"servicePlan":"T Plan 2","smsMessage":"The rain in Spain stays mainly '\
      'in the plain."}'
    ))

    # Perform the API call through the SDK function
    result = @controller.send_sms_to_device(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"595f5c44-c31c-4552-8670-020a1545a84d"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # When HTTP status is 202, a URL will be returned in the Location header of the form /sms/{aname}/history?next={token}. This URL can be used to request the next set of messages.
  def test_list_devices_sms_messages()
    # Parameters for the API call
    aname = '0252012345-00001'
    mnext = nil

    # Perform the API call through the SDK function
    result = @controller.list_devices_sms_messages(aname, mnext: mnext)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"messages":[{"deviceIds":[{"id":"09623489171","kind":"esn"}],"message"'\
      ':"testmessage1","timestamp":"2016-01-01T12:29:49-08:00"},{"deviceIds":['\
      '{"id":"09623489171","kind":"esn"}],"message":"testmessage2","timestamp"'\
      ':"2016-01-01T12:31:02-08:00"}],"hasMoreData":false}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # When HTTP status is 202, a URL will be returned in the Location header of the form /sms/{aname}/history?next={token}. This URL can be used to request the next set of messages.
  def test_list_devices_sms_messages1()
    # Parameters for the API call
    aname = '0252012345-00001'
    mnext = nil

    # Perform the API call through the SDK function
    result = @controller.list_devices_sms_messages(aname, mnext: mnext)

    # Test response code
    assert_equal(202, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"messages":[{"deviceIds":[{"id":"09623489171","kind":"esn"}],"message"'\
      ':"testmessage1","timestamp":"2016-01-01T12:29:49-08:00"},{"deviceIds":['\
      '{"id":"09623489171","kind":"esn"}],"message":"testmessage2","timestamp"'\
      ':"2016-01-01T12:31:02-08:00"}],"hasMoreData":false}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Tells the ThingSpace Platform to start sending mobile-originated SMS messages through the EnhancedConnectivityService callback service. SMS messages from devices are queued until they are retrieved by your application, either by callback or synchronously with GET /sms/{accountName}/history.
  def test_start_queued_sms_delivery()
    # Parameters for the API call
    aname = '0252012345-00001'

    # Perform the API call through the SDK function
    result = @controller.start_queued_sms_delivery(aname)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"success":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

end
