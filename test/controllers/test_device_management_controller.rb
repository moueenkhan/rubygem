# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class DeviceManagementControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    token = OAuth2.authorize config
    config = config().clone_with o_auth_token: token

    @response_catcher = HttpResponseCatcher.new
    @controller = DeviceManagementController.new config, http_call_back: @response_catcher
  end

  # If the devices do not already exist in the account, this API resource adds them before activation.
  def test_activate_service_for_devices()
    # Parameters for the API call
    body = CarrierActivateRequest.from_hash(APIHelper.json_deserialize(
      '{"devices":[{"deviceIds":[{"kind":"imei","id":"990013907835573"},{"kind'\
      '":"iccid","id":"89141390780800784259"}]},{"deviceIds":[{"kind":"imei","'\
      'id":"990013907884259"},{"kind":"iccid","id":"89141390780800735573"}]}],'\
      '"accountName":"0868924207-00001","servicePlan":"m2m_4G","mdnZipCode":"9'\
      '8801","customFields":[{"key":"CustomField2","value":"SuperVend"}],"grou'\
      'pName":"4G West","primaryPlaceOfUse":{"customerName":{"title":"Presiden'\
      't","firstName":"Zaffod","lastName":"Beeblebrox"},"address":{"addressLin'\
      'e1":"1600 Pennsylvania Ave NW","city":"Washington","state":"DC","zip":"'\
      '20500","country":"USA"}}}'
    ))

    # Perform the API call through the SDK function
    result = @controller.activate_service_for_devices(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"595f5c44-c31c-4552-8670-020a1545a84d"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Use this API if you want to manage some device settings before you are ready to activate service for the devices.
  def test_add_devices()
    # Parameters for the API call
    body = AddDevicesRequest.from_hash(APIHelper.json_deserialize(
      '{"accountName":"0868924207-00001","customFields":[{"key":"CustomField2"'\
      ',"value":"SuperVend"}],"devicesToAdd":[{"deviceIds":[{"kind":"imei","id'\
      '":"990013907835573"},{"kind":"iccid","id":"89141390780800784259"}]},{"d'\
      'eviceIds":[{"kind":"imei","id":"990013907884259"},{"kind":"iccid","id":'\
      '"89141390780800735573"}]}],"groupName":"West Region","state":"preactive'\
      '"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.add_devices(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"deviceIds":[{"id":"89148000000800784259","kind":"iccid"}],"response"'\
      ':"Success"}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Sends a CarrierService callback message for each device in the request when the contact information has been changed, or if there was a problem and the change could not be completed.
  def test_update_devices_contact_information()
    # Parameters for the API call
    body = ContactInfoUpdateRequest.from_hash(APIHelper.json_deserialize(
      '{"devices":[{"deviceIds":[{"kind":"ESN","id":"19110173057"},{"kind":"ES'\
      'N","id":"19110173057"}]}],"accountName":"0212345678-00001","primaryPlac'\
      'eOfUse":{"address":{"addressLine1":"9868 Scranton Rd","addressLine2":"S'\
      'uite A","city":"San Diego","state":"CA","country":"USA","zip":"92121","'\
      'zip4":"0001","phone":"1234567890","phoneType":"H","emailAddress":"zaffo'\
      'd@theinternet.com"},"customerName":{"firstName":"Zaffod","lastName":"Be'\
      'eblebrox","middleName":"P","title":"President","suffix":"I"}}}'
    ))

    # Perform the API call through the SDK function
    result = @controller.update_devices_contact_information(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"24da9f9a-d110-4a54-86b4-93fb76aab83c"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Sends a CarrierService callback message for each device in the request when the custom fields have been changed, or if there was a problem and the change could not be completed.
  def test_update_devices_custom_fields()
    # Parameters for the API call
    body = CustomFieldsUpdateRequest.from_hash(APIHelper.json_deserialize(
      '{"devices":[{"deviceIds":[{"id":"89148000000800139708","kind":"iccid"}]'\
      '}],"customFieldsToUpdate":[{"key":"CustomField1","value":"West Region"}'\
      ',{"key":"CustomField2","value":"Distribution"}]}'
    ))

    # Perform the API call through the SDK function
    result = @controller.update_devices_custom_fields(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"595f5c44-c31c-4552-8670-020a1545a84d"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Deactivating service for a device may result in an early termination fee (ETF) being charged to the account, depending on the terms of the contract with Verizon. If your contract allows ETF waivers and if you want to use one for a particular deactivation, set the etfWaiver value to True.
  def test_deactivate_service_for_devices()
    # Parameters for the API call
    body = CarrierDeactivateRequest.from_hash(APIHelper.json_deserialize(
      '{"devices":[{"deviceIds":[{"id":"20-digit ICCID","kind":"iccid"}]}],"re'\
      'asonCode":"FF","etfWaiver":true}'
    ))

    # Perform the API call through the SDK function
    result = @controller.deactivate_service_for_devices(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"595f5c44-c31c-4552-8670-020a1545a84d"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Use this API to remove unneeded devices from an account.
  def test_delete_deactivated_devices()
    # Parameters for the API call
    body = DeleteDevicesRequest.from_hash(APIHelper.json_deserialize(
      '{"devicesToDelete":[{"deviceIds":[{"id":"09005470263","kind":"esn"}]},{'\
      '"deviceIds":[{"id":"85000022411113460014","kind":"iccid"}]},{"deviceIds'\
      '":[{"id":"85000022412313460016","kind":"iccid"}]}]}'
    ))

    # Perform the API call through the SDK function
    result = @controller.delete_deactivated_devices(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"deviceIds":{"id":"09005470263","kind":"esn"},"status":"Success"},{"d'\
      'eviceIds":{"id":"85000022411113460014","kind":"iccid"},"status":"Succes'\
      's"},{"deviceIds":[{"id":"85000022412313460016","kind":"iccid"},{"id":"0'\
      '9005470263","kind":"esn"}],"status":"Failed","message":"The device is n'\
      'ot in deactive state."}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Returns information about a single device or information about all devices that match the given parameters. Returned information includes device provisioning state, service plan, MDN, MIN, and IP address.
  def test_list_devices_information()
    # Parameters for the API call
    body = AccountDeviceListRequest.from_hash(APIHelper.json_deserialize(
      '{"deviceId":{"id":"20-digit ICCID","kind":"iccid"}}'
    ))

    # Perform the API call through the SDK function
    result = @controller.list_devices_information(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"hasMoreData":false,"devices":[{"accountName":"0000123456-00001","bill'\
      'ingCycleEndDate":"2020-05-09T20:00:00-04:00","carrierInformations":[{"c'\
      'arrierName":"Verizon Wireless","servicePlan":"m2m4G","state":"active"}]'\
      ',"connected":false,"createdAt":"2019-08-07T10:42:15-04:00","deviceIds":'\
      '[{"id":"10-digit MDN","kind":"mdn"},{"id":"15-digit IMEI","kind":"imei"'\
      '}],"groupNames":["southwest"],"ipAddress":"0.0.0.0","lastActivationBy":'\
      '"Joe Q Public","lastActivationDate":"2019-08-07T10:42:34-04:00","lastCo'\
      'nnectionDate":"2020-03-12T04:23:37-04:00"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Returns information about a single device or information about all devices that match the given parameters. Returned information includes device provisioning state, service plan, MDN, MIN, and IP address.
  def test_list_devices_information1()
    # Parameters for the API call
    body = AccountDeviceListRequest.from_hash(APIHelper.json_deserialize(
      '{"deviceId":{"id":"20-digit ICCID","kind":"iccid"}}'
    ))

    # Perform the API call through the SDK function
    result = @controller.list_devices_information(body)

    # Test response code
    assert_equal(202, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"hasMoreData":false,"devices":[{"accountName":"0000123456-00001","bill'\
      'ingCycleEndDate":"2020-05-09T20:00:00-04:00","carrierInformations":[{"c'\
      'arrierName":"Verizon Wireless","servicePlan":"m2m4G","state":"active"}]'\
      ',"connected":false,"createdAt":"2019-08-07T10:42:15-04:00","deviceIds":'\
      '[{"id":"10-digit MDN","kind":"mdn"},{"id":"15-digit IMEI","kind":"imei"'\
      '}],"groupNames":["southwest"],"ipAddress":"0.0.0.0","lastActivationBy":'\
      '"Joe Q Public","lastActivationDate":"2019-08-07T10:42:34-04:00","lastCo'\
      'nnectionDate":"2020-03-12T04:23:37-04:00"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Returns a list of all 4G devices with an ICCID (SIM) that was not activated with the expected IMEI (hardware) during a specified time frame.
  def test_list_devices_with_imei_iccid_mismatch()
    # Parameters for the API call
    body = DeviceMismatchListRequest.from_hash(APIHelper.json_deserialize(
      '{"accountName":"0342077109-00001","devices":[{"deviceIds":[{"kind":"ICC'\
      'ID","id":"8914800000080078"},{"kind":"MDN","id":"5096300587"}]}],"filte'\
      'r":{"earliest":"2020-05-01T15:00:00-08:00Z","latest":"2020-07-30T15:00:'\
      '00-08:00Z"}}'
    ))

    # Perform the API call through the SDK function
    result = @controller.list_devices_with_imei_iccid_mismatch(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"devices":[{"accountName":"0212398765-00001","mdn":"5096300587","activ'\
      'ationDate":"2011-01-21T10:55:27-08:00","iccid":"89148000000800784259","'\
      'preImei":"990003420535573","postImei":"987603420573553","simOtaDate":"2'\
      '017-12-01T16:00:00-08:00"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Move active devices from one billing account to another within a customer profile.
  def test_move_devices_within_accounts_of_profile()
    # Parameters for the API call
    body = MoveDeviceRequest.from_hash(APIHelper.json_deserialize(
      '{"devices":[{"deviceIds":[{"kind":"ESN","id":"19110173057"}]}],"account'\
      'Name":"0212345678-00001","servicePlan":"M2M5GB"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.move_devices_within_accounts_of_profile(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"ec682a8b-e288-4806-934d-24e7a59ed889"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Changes the provisioning state of one or more devices to a specified customer-defined service and state.
  def test_update_devices_state()
    # Parameters for the API call
    body = GoToStateRequest.from_hash(APIHelper.json_deserialize(
      '{"devices":[{"deviceIds":[{"kind":"imei","id":"990013907835573"},{"kind'\
      '":"iccid","id":"89141390780800784259"}]},{"deviceIds":[{"kind":"imei","'\
      'id":"990013907884259"},{"kind":"iccid","id":"89141390780800735573"}]}],'\
      '"serviceName":"My Service","stateName":"My State","servicePlan":"87641"'\
      ',"mdnZipCode":"94203","groupName":"4G West","publicIpRestriction":"unre'\
      'stricted","primaryPlaceOfUse":{"customerName":{"title":"President","fir'\
      'stName":"Zaffod","lastName":"Beeblebrox"},"address":{"addressLine1":"16'\
      '00 Pennsylvania Ave NW","city":"Washington","state":"DC","zip":"20500",'\
      '"country":"USA"}}}'
    ))

    # Perform the API call through the SDK function
    result = @controller.update_devices_state(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"595f5c44-c31c-4552-8670-020a1545a84d"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Changes the service plan for one or more devices.
  def test_change_devices_service_plan()
    # Parameters for the API call
    body = ServicePlanUpdateRequest.from_hash(APIHelper.json_deserialize(
      '{"devices":[{"deviceIds":[{"id":"A100003685E561","kind":"meid"}]}],"ser'\
      'vicePlan":"new_service_plan_code"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.change_devices_service_plan(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"c8de7c1d-59b9-4cf3-b969-db76cb2ce509"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Suspends service for one or more devices.
  def test_suspend_service_for_devices()
    # Parameters for the API call
    body = CarrierActionsRequest.from_hash(APIHelper.json_deserialize(
      '{"devices":[{"deviceIds":[{"id":"89148000000800139708","kind":"iccid"}]'\
      '}]}'
    ))

    # Perform the API call through the SDK function
    result = @controller.suspend_service_for_devices(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"595f5c44-c31c-4552-8670-020a1545a84d"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Restores service to one or more suspended devices.
  def test_restore_service_for_suspended_devices()
    # Parameters for the API call
    body = CarrierActionsRequest.from_hash(APIHelper.json_deserialize(
      '{"devices":[{"deviceIds":[{"id":"89148000000800139708","kind":"iccid"}]'\
      '}]}'
    ))

    # Perform the API call through the SDK function
    result = @controller.restore_service_for_suspended_devices(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"595f5c44-c31c-4552-8670-020a1545a84d"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Checks whether specified devices are registered by the manufacturer with the Verizon network and are available to be activated.
  def test_check_devices_availability_for_activation()
    # Parameters for the API call
    body = DeviceActivationRequest.from_hash(APIHelper.json_deserialize(
      '{"accountName":"0212345678-00001","devices":[{"deviceIds":[{"kind":"mei'\
      'd","id":"A100008385E561"}]}]}'
    ))

    # Perform the API call through the SDK function
    result = @controller.check_devices_availability_for_activation(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"595f5c44-c31c-4552-8670-020a1545a84d"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Each response includes a maximum of 500 records. To obtain more records, you can call the API multiple times, adjusting the earliest value each time to start where the previous request finished.
  def test_retrieve_device_connection_history()
    # Parameters for the API call
    body = DeviceConnectionListRequest.from_hash(APIHelper.json_deserialize(
      '{"deviceId":{"id":"89141390780800784259","kind":"iccid"},"earliest":"20'\
      '15-09-16T00:00:01Z","latest":"2010-09-18T00:00:01Z"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.retrieve_device_connection_history(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"connectionHistory":[{"connectionEventAttributes":[{"key":"BytesUsed",'\
      '"value":"0"},{"key":"Event","value":"Start"}],"extendedAttributes":[],"'\
      'occurredAt":"2015-12-17T14:12:36-05:00"},{"connectionEventAttributes":['\
      '{"key":"BytesUsed","value":"419863234"},{"key":"Event","value":"Stop"},'\
      '{"key":"Msisdn","value":"15086303371"}],"extendedAttributes":[],"occurr'\
      'edAt":"2015-12-19T01:20:00-05:00"}],"hasMoreData":false}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Each response includes a maximum of 500 records. To obtain more records, you can call the API multiple times, adjusting the earliest value each time to start where the previous request finished.
  def test_retrieve_device_connection_history1()
    # Parameters for the API call
    body = DeviceConnectionListRequest.from_hash(APIHelper.json_deserialize(
      '{"deviceId":{"id":"89141390780800784259","kind":"iccid"},"earliest":"20'\
      '15-09-16T00:00:01Z","latest":"2010-09-18T00:00:01Z"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.retrieve_device_connection_history(body)

    # Test response code
    assert_equal(202, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"connectionHistory":[{"connectionEventAttributes":[{"key":"BytesUsed",'\
      '"value":"0"},{"key":"Event","value":"Start"}],"extendedAttributes":[],"'\
      'occurredAt":"2015-12-17T14:12:36-05:00"},{"connectionEventAttributes":['\
      '{"key":"BytesUsed","value":"419863234"},{"key":"Event","value":"Stop"},'\
      '{"key":"Msisdn","value":"15086303371"}],"extendedAttributes":[],"occurr'\
      'edAt":"2015-12-19T01:20:00-05:00"}],"hasMoreData":false}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Changes or removes the CostCenterCode value or customer name and address (Primary Place of Use) for one or more devices.
  def test_update_devices_cost_center_code()
    # Parameters for the API call
    body = DeviceCostCenterRequest.from_hash(APIHelper.json_deserialize(
      '{"costCenter":"cc12345","devices":[{"deviceIds":[{"id":"891480000008001'\
      '39708","kind":"iccid"}]}]}'
    ))

    # Perform the API call through the SDK function
    result = @controller.update_devices_cost_center_code(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"595f5c44-c31c-4552-8670-020a1545a84d"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Returns extended diagnostic information about a specified device, including connectivity, provisioning, billing and location status.
  def test_get_device_extended_diagnostic_information()
    # Parameters for the API call
    body = DeviceExtendedDiagnosticsRequest.from_hash(APIHelper.json_deserialize(
      '{"accountName":"1223334444-00001","deviceList":[{"id":"10-digit MDN","k'\
      'ind":"mdn"}]}'
    ))

    # Perform the API call through the SDK function
    result = @controller.get_device_extended_diagnostic_information(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"categories":[{"categoryName":"Connectivity","extendedAttributes":[{"k'\
      'ey":"Connected","value":"false"}]}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Returns the provisioning history of a specified device during a specified time period.
  def test_list_devices_provisioning_history()
    # Parameters for the API call
    body = DeviceProvisioningHistoryListRequest.from_hash(APIHelper.json_deserialize(
      '{"deviceId":{"id":"89141390780800784259","kind":"iccid"},"earliest":"20'\
      '15-09-16T00:00:01Z","latest":"2015-09-18T00:00:01Z"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.list_devices_provisioning_history(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"provisioningHistory":[{"occurredAt":"2015-12-17T13:56:13-05:00","sta'\
      'tus":"Success","eventBy":"Harry Potter","eventType":"Activation Confirm'\
      'ed","servicePlan":"Tablet5GB","mdn":"","msisdn":"15086303371","extended'\
      'Attributes":[]}],"hasMoreData":false}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Returns the provisioning history of a specified device during a specified time period.
  def test_list_devices_provisioning_history1()
    # Parameters for the API call
    body = DeviceProvisioningHistoryListRequest.from_hash(APIHelper.json_deserialize(
      '{"deviceId":{"id":"89141390780800784259","kind":"iccid"},"earliest":"20'\
      '15-09-16T00:00:01Z","latest":"2015-09-18T00:00:01Z"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.list_devices_provisioning_history(body)

    # Test response code
    assert_equal(202, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"provisioningHistory":[{"occurredAt":"2015-12-17T13:56:13-05:00","sta'\
      'tus":"Success","eventBy":"Harry Potter","eventType":"Activation Confirm'\
      'ed","servicePlan":"Tablet5GB","mdn":"","msisdn":"15086303371","extended'\
      'Attributes":[]}],"hasMoreData":false}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # 4G and GSM devices do not have a PRL.
  def test_list_current_devices_prl_version()
    # Parameters for the API call
    body = DevicePrlListRequest.from_hash(APIHelper.json_deserialize(
      '{"groupName":"West Region","accountName":"101234-0001","servicePlan":"3'\
      'G 2MB"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.list_current_devices_prl_version(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"595f5c44-c31c-4552-8670-020a1545a84d"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Returns DeviceSuspensionStatus callback messages containing the current device state and information on how many days a device has been suspended and can continue to be suspended.
  def test_get_device_service_suspension_status()
    # Parameters for the API call
    body = DeviceSuspensionStatusRequest.from_hash(APIHelper.json_deserialize(
      '{"filter":{"groupName":"suspended devices"},"accountName":"1223334444-0'\
      '0001"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.get_device_service_suspension_status(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"904dcdc6-a590-45e4-ac76-403306f6d883"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Returns the network data usage history of a device during a specified time period.
  def test_list_devices_usage_history()
    # Parameters for the API call
    body = DeviceUsageListRequest.from_hash(APIHelper.json_deserialize(
      '{"earliest":"2018-03-20T00:00:01Z","latest":"2020-12-31T00:00:01Z"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.list_devices_usage_history(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"hasMoreData":false,"usageHistory":[{"bytesUsed":4096,"extendedAttribu'\
      'tes":[{"key":"MoSms","value":"0"}],"smsUsed":0,"source":"Raw Usage","ti'\
      'mestamp":"2020-12-01T00:00:00Z"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Returns the network data usage history of a device during a specified time period.
  def test_list_devices_usage_history1()
    # Parameters for the API call
    body = DeviceUsageListRequest.from_hash(APIHelper.json_deserialize(
      '{"earliest":"2018-03-20T00:00:01Z","latest":"2020-12-31T00:00:01Z"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.list_devices_usage_history(body)

    # Test response code
    assert_equal(202, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"hasMoreData":false,"usageHistory":[{"bytesUsed":4096,"extendedAttribu'\
      'tes":[{"key":"MoSms","value":"0"}],"smsUsed":0,"source":"Raw Usage","ti'\
      'mestamp":"2020-12-01T00:00:00Z"}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # The information is returned in a callback response, so you must register a URL for DeviceUsage callback messages using the POST /callbacks API.
  def test_retrieve_aggregate_device_usage_history()
    # Parameters for the API call
    body = DeviceAggregateUsageListRequest.from_hash(APIHelper.json_deserialize(
      '{"deviceIds":[{"id":"84258000000891490087","kind":"ICCID"}],"accountNam'\
      'e":"9992330389-00001","endTime":"2021-08-30T00:00:00-06:00","startTime"'\
      ':"2021-08-01T00:00:00-06:00"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.retrieve_aggregate_device_usage_history(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"requestId":"1631e200-7398-4609-b1f8-398341229176"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

end
