# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class AccountsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    token = OAuth2.authorize config
    config = config().clone_with o_auth_token: token

    @response_catcher = HttpResponseCatcher.new
    @controller = AccountsController.new config, http_call_back: @response_catcher
  end

  # Returns information about a specified account.
  def test_get_account_information()
    # Parameters for the API call
    aname = 'Chintan_CPNStaticBulk'

    # Perform the API call through the SDK function
    result = @controller.get_account_information(aname)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"accountName":"Chintan_CPNStaticBulk","accountNumber":"1234567890-7777'\
      '7","organizationName":"ChintanCPNBulk","isProvisioningAllowed":true,"ca'\
      'rriers":["Verizon Wireless"],"features":["Static IP","Dynamic IP","Cust'\
      'omer PN"],"iPPools":[{"poolName":"ACMESTATIC001","poolType":"Static IP"'\
      ',"isDefaultPool":true},{"poolName":"ACMEDYNAMIC001","poolType":"Dynamic'\
      ' IP","isDefaultPool":false}],"servicePlans":[{"name":"","code":"92876",'\
      '"sizeKb":1,"carrierServicePlanCode":"","extendedAttributes":[]},{"name"'\
      ':"","code":"92876","sizeKb":1,"carrierServicePlanCode":"","extendedAttr'\
      'ibutes":[]}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Returns a list and details of all custom services and states defined for a specified account.
  def test_list_account_states_and_services()
    # Parameters for the API call
    aname = '0252012345-00001'

    # Perform the API call through the SDK function
    result = @controller.list_account_states_and_services(aname)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"engagement":[{"engagementId":"1234","chargingGroup":"Engagement1234",'\
      '"services":[{"name":"Svc1","description":"Usage Segmentation - Main Lin'\
      'e.","states":[{"name":"Svc1 Activate","workflowSequenceNumber":1,"servi'\
      'cePlans":["4523aef7250f67205fd5","4d4090c0f2d48814c94d"]},{"name":"Svc1'\
      ' No Telematics","workflowSequenceNumber":3,"servicePlans":["4523aef7250'\
      'f67205fd5","4d4090c0f2d48814c94d"]},{"name":"Svc1 Deactivate","workflow'\
      'SequenceNumber":2,"servicePlans":["4523aef7250f67205fd5","4d4090c0f2d48'\
      '814c94d"]}]},{"name":"WIFI","description":"Usage Segmentation - WiFi.",'\
      '"states":[{"name":"WIFI Redirect","workflowSequenceNumber":2,"servicePl'\
      'ans":["4d4090c0f2d48814c94d"]},{"name":"WIFI Trial","workflowSequenceNu'\
      'mber":4,"servicePlans":["4d4090c0f2d48814c94d"]},{"name":"WIFI Goodwill'\
      '","workflowSequenceNumber":6,"servicePlans":["4d4090c0f2d48814c94d"]},{'\
      '"name":"WIFI Disable","workflowSequenceNumber":3,"servicePlans":["4d409'\
      '0c0f2d48814c94d"]}]}]}]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # When HTTP status is 202, a URL will be returned in the Location header of the form /leads/{aname}?next={token}. This URL can be used to request the next set of leads.
  def test_list_account_leads()
    # Parameters for the API call
    aname = '0252012345-00001'
    mnext = nil

    # Perform the API call through the SDK function
    result = @controller.list_account_leads(aname, mnext: mnext)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"leads":[{"leadId":"L-10001","leadState":"Qualified","address":{"addre'\
      'ssLine1":"1600 Pennsylvania Avenue","addressLine2":"","city":"Washingto'\
      'n","state":"DC","zip":"20500","country":"USA"}}],"hasMoreData":false}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # When HTTP status is 202, a URL will be returned in the Location header of the form /leads/{aname}?next={token}. This URL can be used to request the next set of leads.
  def test_list_account_leads1()
    # Parameters for the API call
    aname = '0252012345-00001'
    mnext = nil

    # Perform the API call through the SDK function
    result = @controller.list_account_leads(aname, mnext: mnext)

    # Test response code
    assert_equal(202, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"leads":[{"leadId":"L-10001","leadState":"Qualified","address":{"addre'\
      'ssLine1":"1600 Pennsylvania Avenue","addressLine2":"","city":"Washingto'\
      'n","state":"DC","zip":"20500","country":"USA"}}],"hasMoreData":false}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

end
