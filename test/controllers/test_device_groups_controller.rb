# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class DeviceGroupsControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    token = OAuth2.authorize config
    config = config().clone_with o_auth_token: token

    @response_catcher = HttpResponseCatcher.new
    @controller = DeviceGroupsController.new config, http_call_back: @response_catcher
  end

  # Create a new device group and optionally add devices to the group. Device groups can make it easier to manage similar devices and to get reports on their usage.
  def test_create_device_group()
    # Parameters for the API call
    body = CreateDeviceGroupRequest.from_hash(APIHelper.json_deserialize(
      '{"accountName":"10001234-0001","groupName":"NV tanks","groupDescription'\
      '":"Nevada tank level monitors.","devicesToAdd":[{"kind":"imei","id":"99'\
      '0003420535537"}]}'
    ))

    # Perform the API call through the SDK function
    result = @controller.create_device_group(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"success":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Returns a list of all device groups in a specified account.
  def test_list_device_groups()
    # Parameters for the API call
    aname = '0252012345-00001'

    # Perform the API call through the SDK function
    result = @controller.list_device_groups(aname)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"name":"Unassigned Devices","description":"All devices that are not i'\
      'n another device group.","isDefaultGroup":true,"extendedAttributes":[]}'\
      ',{"name":"West Coast Devices","description":"","isDefaultGroup":false,"'\
      'extendedAttributes":[]}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

end
