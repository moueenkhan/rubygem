# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class SessionManagementControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    token = OAuth2.authorize config
    config = config().clone_with o_auth_token: token

    @response_catcher = HttpResponseCatcher.new
    @controller = SessionManagementController.new config, http_call_back: @response_catcher
  end

  # Initiates a Connectivity Management session and returns a VZ-M2M session token that is required in subsequent API requests.
  def test_start_connectivity_management_session()
    # Parameters for the API call
    body = LogInRequest.from_hash(APIHelper.json_deserialize(
      '{"username":"zbeeblebrox","password":"IMgr8"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.start_connectivity_management_session(body: body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"sessionToken":"bcce3ea6-fe4f-4952-bacf-eadd80718e83"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Ends a Connectivity Management session.
  def test_end_connectivity_management_session()

    # Perform the API call through the SDK function
    result = @controller.end_connectivity_management_session()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"sessionToken":"bcce3ea6-fe4f-4952-bacf-eadd80718e83"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # The new password is effective immediately. Passwords do not expire, but Verizon recommends changing your password every 90 days.
  def test_reset_connectivity_management_password()
    # Parameters for the API call
    body = SessionResetPasswordRequest.from_hash(APIHelper.json_deserialize(
      '{"oldPassword":"grflbk"}'
    ))

    # Perform the API call through the SDK function
    result = @controller.reset_connectivity_management_password(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"newPassword":"Wh0a1545a84d"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

end
