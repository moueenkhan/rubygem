# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  # An enum for SDK environments.
  class Environment
    ENVIRONMENT = [
      PRODUCTION = 'Production'.freeze,
      STAGING = 'Staging'.freeze
    ].freeze
  end

  # An enum for API servers.
  class Server
    SERVER = [
      M2M = 'M2M'.freeze,
      OAUTH_SERVER = 'OAuth Server'.freeze
    ].freeze
  end

  # All configuration including auth info and base URI for the API access
  # are configured in this class.
  class Configuration
    # The attribute readers for properties.
    attr_reader :http_client, :connection, :adapter, :timeout, :max_retries, :retry_interval,
                :backoff_factor, :retry_statuses, :retry_methods, :environment, :vz_m2_m_token,
                :o_auth_client_id, :o_auth_client_secret

    def o_auth_token
      if @o_auth_token.is_a? OAuthToken
        OAuthToken.from_hash @o_auth_token.to_hash
      else
        @o_auth_token
      end
    end

    class << self
      attr_reader :environments
    end

    def initialize(connection: nil, adapter: :net_http_persistent, timeout: 60,
                   max_retries: 0, retry_interval: 1, backoff_factor: 2,
                   retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                   retry_methods: %i[get put],
                   environment: Environment::PRODUCTION,
                   vz_m2_m_token: 'TODO: Replace',
                   o_auth_client_id: 'TODO: Replace',
                   o_auth_client_secret: 'TODO: Replace', o_auth_token: nil)
      # The Faraday connection object passed by the SDK user for making requests
      @connection = connection

      # The Faraday adapter object passed by the SDK user for performing http requests
      @adapter = adapter

      # The value to use for connection timeout
      @timeout = timeout

      # The number of times to retry an endpoint call if it fails
      @max_retries = max_retries

      # Pause in seconds between retries
      @retry_interval = retry_interval

      # The amount to multiply each successive retry's interval amount
      # by in order to provide backoff
      @backoff_factor = backoff_factor

      # A list of HTTP statuses to retry
      @retry_statuses = retry_statuses

      # A list of HTTP methods to retry
      @retry_methods = retry_methods

      # Current API environment
      @environment = String(environment)

      # M2M Session Token
      @vz_m2_m_token = vz_m2_m_token

      # OAuth 2 Client ID
      @o_auth_client_id = o_auth_client_id

      # OAuth 2 Client Secret
      @o_auth_client_secret = o_auth_client_secret

      # Object for storing information about the OAuth token
      @o_auth_token = if o_auth_token.is_a? OAuthToken
                        OAuthToken.from_hash o_auth_token.to_hash
                      else
                        o_auth_token
                      end

      # The Http Client to use for making requests.
      @http_client = create_http_client
    end

    def clone_with(connection: nil, adapter: nil, timeout: nil,
                   max_retries: nil, retry_interval: nil, backoff_factor: nil,
                   retry_statuses: nil, retry_methods: nil, environment: nil,
                   vz_m2_m_token: nil, o_auth_client_id: nil,
                   o_auth_client_secret: nil, o_auth_token: nil)
      connection ||= self.connection
      adapter ||= self.adapter
      timeout ||= self.timeout
      max_retries ||= self.max_retries
      retry_interval ||= self.retry_interval
      backoff_factor ||= self.backoff_factor
      retry_statuses ||= self.retry_statuses
      retry_methods ||= self.retry_methods
      environment ||= self.environment
      vz_m2_m_token ||= self.vz_m2_m_token
      o_auth_client_id ||= self.o_auth_client_id
      o_auth_client_secret ||= self.o_auth_client_secret
      o_auth_token ||= self.o_auth_token

      Configuration.new(connection: connection, adapter: adapter,
                        timeout: timeout, max_retries: max_retries,
                        retry_interval: retry_interval,
                        backoff_factor: backoff_factor,
                        retry_statuses: retry_statuses,
                        retry_methods: retry_methods, environment: environment,
                        vz_m2_m_token: vz_m2_m_token,
                        o_auth_client_id: o_auth_client_id,
                        o_auth_client_secret: o_auth_client_secret,
                        o_auth_token: o_auth_token)
    end

    def create_http_client
      FaradayClient.new(timeout: timeout, max_retries: max_retries,
                        retry_interval: retry_interval,
                        backoff_factor: backoff_factor,
                        retry_statuses: retry_statuses,
                        retry_methods: retry_methods, connection: connection,
                        adapter: adapter)
    end

    # All the environments the SDK can run in.
    ENVIRONMENTS = {
      Environment::PRODUCTION => {
        Server::M2M => 'https://thingspace.verizon.com/api/m2m',
        Server::OAUTH_SERVER => 'https://thingspace.verizon.com/api/ts/v1'
      },
      Environment::STAGING => {
        Server::M2M => 'https://staging.thingspace.verizon.com/api/m2m',
        Server::OAUTH_SERVER => 'https://staging.thingspace.verizon.com/api/ts/v1'
      }
    }.freeze

    # Generates the appropriate base URI for the environment and the server.
    # @param [Configuration::Server] The server enum for which the base URI is
    # required.
    # @return [String] The base URI.
    def get_base_uri(server = Server::M2M)
      ENVIRONMENTS[environment][server].clone
    end
  end
end
