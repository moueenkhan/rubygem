# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'base64'

module ThingSpaceConnectivityManagementApi
  # Utility class for OAuth 2 authorization and token management.
  class OAuth2
    def self.auth_controller(config)
      OAuthAuthorizationController.new config
    end

    # Add OAuth2 authentication to the http request.
    # @param [HttpRequest] The HttpRequest object to which authentication will
    # be added.
    def self.apply(config, http_request)
      check_auth config.o_auth_token
      token = config.o_auth_token.access_token
      http_request.headers['Authorization'] = "Bearer #{token}"
    end

    # Get an OAuth token that you must then set in your Configuration object
    # to authorize subsequent calls.# @param [String | Array of String] Any scopes for the authentication token.
    # @param [Hash] Any additional form parameters.
    def self.authorize(config, scope: nil, additional_params: nil)
      token = auth_controller(config).request_token(
        build_basic_auth_header(config),
        scope: scope ? Array(scope).compact.join(' ') : nil,
        _field_parameters: additional_params
      )
      token.expiry = (Time.now.to_i + token.expires_in.to_i) if token.expires_in
      token
    end

    # Builds the basic auth header for endpoints in the
    # OAuth Authorization Controller.
    def self.build_basic_auth_header(config)
      value = "#{config.o_auth_client_id}:" \
              "#{config.o_auth_client_secret}"
      encoded = Base64.strict_encode64(value)
      "Basic #{encoded}"
    end

    # Checks if OAuth token is valid.
    def self.check_auth(token)
      return unless token.nil?

      raise 'Client is not authorized. An OAuth token is needed to ' \
            'make API calls.'
    end
  end
end
