# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  # SessionManagementController
  class SessionManagementController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Initiates a Connectivity Management session and returns a VZ-M2M session
    # token that is required in subsequent API requests.
    # @param [LogInRequest] body Optional parameter: Request to initiate a
    # session.
    # @return [LogInResult] response from the API call
    def start_connectivity_management_session(body: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/session/login'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      LogInResult.from_hash(decoded)
    end

    # Ends a Connectivity Management session.
    # @return [LogOutRequest] response from the API call
    def end_connectivity_management_session
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/session/logout'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      LogOutRequest.from_hash(decoded)
    end

    # The new password is effective immediately. Passwords do not expire, but
    # Verizon recommends changing your password every 90 days.
    # @param [SessionResetPasswordRequest] body Required parameter: Request with
    # current password that needs to be reset.
    # @return [SessionResetPasswordResult] response from the API call
    def reset_connectivity_management_password(body)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/session/password/actions/reset'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      SessionResetPasswordResult.from_hash(decoded)
    end
  end
end
