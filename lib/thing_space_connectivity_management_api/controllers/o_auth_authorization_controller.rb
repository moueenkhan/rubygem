# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  # OAuthAuthorizationController
  class OAuthAuthorizationController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Create a new OAuth 2 token.
    # @param [String] authorization Required parameter: Authorization header in
    # Basic auth format
    # @param [String] scope Optional parameter: Requested scopes as a
    # space-delimited list.
    # @param [Hash] _field_parameters Additional optional form parameters are
    # supported by this endpoint.
    # @return [OAuthToken] response from the API call
    def request_token(authorization,
                      scope: nil,
                      _field_parameters: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri(Server::OAUTH_SERVER)
      _query_builder << '/oauth2/token'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Authorization' => authorization
      }

      # Prepare form parameters.
      _parameters = {
        'grant_type' => 'client_credentials',
        'scope' => scope
      }
      _parameters.merge!(_field_parameters) if !_parameters.nil? && !_field_parameters.nil?
      _parameters = APIHelper.form_encode_parameters(_parameters)

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: _parameters
      )
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise OAuthProviderException.new(
          'OAuth 2 provider returned an error.',
          _response
        )
      when 401
        raise OAuthProviderException.new(
          'OAuth 2 provider says client authentication failed.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      OAuthToken.from_hash(decoded)
    end
  end
end
