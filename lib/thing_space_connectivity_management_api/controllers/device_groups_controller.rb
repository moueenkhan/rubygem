# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  # DeviceGroupsController
  class DeviceGroupsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Create a new device group and optionally add devices to the group. Device
    # groups can make it easier to manage similar devices and to get reports on
    # their usage.
    # @param [CreateDeviceGroupRequest] body Required parameter: A request to
    # create a new device group.
    # @return [ConnectivityManagementSuccessResult] response from the API call
    def create_device_group(body)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/groups'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ConnectivityManagementSuccessResult.from_hash(decoded)
    end

    # Returns a list of all device groups in a specified account.
    # @param [String] aname Required parameter: Account name.
    # @return [List of DeviceGroup] response from the API call
    def list_device_groups(aname)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/groups/{aname}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aname' => { 'value' => aname, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      decoded.map { |element| DeviceGroup.from_hash(element) }
    end

    # When HTTP status is 202, a URL will be returned in the Location header of
    # the form /groups/{aname}/name/{gname}/?next={token}. This URL can be used
    # to request the next set of groups.
    # @param [String] aname Required parameter: Account name.
    # @param [String] gname Required parameter: Group name.
    # @param [Integer] mnext Optional parameter: Continue the previous query
    # from the pageUrl pagetoken.
    # @return [DeviceGroupDevicesData] response from the API call
    def get_device_group_information(aname,
                                     gname,
                                     mnext: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/groups/{aname}/name/{gname}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aname' => { 'value' => aname, 'encode' => true },
        'gname' => { 'value' => gname, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'next' => mnext
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      DeviceGroupDevicesData.from_hash(decoded)
    end

    # Make changes to a device group, including changing the name and
    # description, and adding or removing devices.
    # @param [String] aname Required parameter: Account name.
    # @param [String] gname Required parameter: Group name.
    # @param [DeviceGroupUpdateRequest] body Required parameter: Request to
    # update device group.
    # @return [ConnectivityManagementSuccessResult] response from the API call
    def update_device_group(aname,
                            gname,
                            body)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/groups/{aname}/name/{gname}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aname' => { 'value' => aname, 'encode' => true },
        'gname' => { 'value' => gname, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ConnectivityManagementSuccessResult.from_hash(decoded)
    end

    # Deletes a device group from the account. Devices in the group are moved to
    # the default device group and are not deleted from the account.
    # @param [String] aname Required parameter: Account name.
    # @param [String] gname Required parameter: Group name.
    # @return [ConnectivityManagementSuccessResult] response from the API call
    def delete_device_group(aname,
                            gname)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/groups/{aname}/name/{gname}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aname' => { 'value' => aname, 'encode' => true },
        'gname' => { 'value' => gname, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ConnectivityManagementSuccessResult.from_hash(decoded)
    end
  end
end
