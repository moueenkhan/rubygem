# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  # SMSController
  class SMSController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # The messages are queued on the ThingSpace Platform and sent as soon as
    # possible, but they may be delayed due to traffic and routing
    # considerations.
    # @param [SMSSendRequest] body Required parameter: Request to send SMS.
    # @return [DeviceManagementResult] response from the API call
    def send_sms_to_device(body)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/sms'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      DeviceManagementResult.from_hash(decoded)
    end

    # When HTTP status is 202, a URL will be returned in the Location header of
    # the form /sms/{aname}/history?next={token}. This URL can be used to
    # request the next set of messages.
    # @param [String] aname Required parameter: Account name.
    # @param [Integer] mnext Optional parameter: Continue the previous query
    # from the URL in Location Header.
    # @return [SMSMessagesQueryResult] response from the API call
    def list_devices_sms_messages(aname,
                                  mnext: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/sms/{aname}/history'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aname' => { 'value' => aname, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'next' => mnext
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      SMSMessagesQueryResult.from_hash(decoded)
    end

    # Tells the ThingSpace Platform to start sending mobile-originated SMS
    # messages through the EnhancedConnectivityService callback service. SMS
    # messages from devices are queued until they are retrieved by your
    # application, either by callback or synchronously with GET
    # /sms/{accountName}/history.
    # @param [String] aname Required parameter: Account name.
    # @return [ConnectivityManagementSuccessResult] response from the API call
    def start_queued_sms_delivery(aname)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/sms/{aname}/startCallbacks'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aname' => { 'value' => aname, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.put(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      ConnectivityManagementSuccessResult.from_hash(decoded)
    end
  end
end
