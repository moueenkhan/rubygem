# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  # AccountsController
  class AccountsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Returns information about a specified account.
    # @param [String] aname Required parameter: Account name.
    # @return [Account] response from the API call
    def get_account_information(aname)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/accounts/{aname}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aname' => { 'value' => aname, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      Account.from_hash(decoded)
    end

    # Returns a list and details of all custom services and states defined for a
    # specified account.
    # @param [String] aname Required parameter: Account name.
    # @return [AccountStatesAndServices] response from the API call
    def list_account_states_and_services(aname)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/accounts/{aname}/statesandservices'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aname' => { 'value' => aname, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      AccountStatesAndServices.from_hash(decoded)
    end

    # When HTTP status is 202, a URL will be returned in the Location header of
    # the form /leads/{aname}?next={token}. This URL can be used to request the
    # next set of leads.
    # @param [String] aname Required parameter: Account name.
    # @param [Integer] mnext Optional parameter: Continue the previous query
    # from the pageUrl in Location Header.
    # @return [AccountLeadsResult] response from the API call
    def list_account_leads(aname,
                           mnext: nil)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/leads/{aname}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aname' => { 'value' => aname, 'encode' => true }
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'next' => mnext
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      AccountLeadsResult.from_hash(decoded)
    end
  end
end
