# thing_space_connectivity_management_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module ThingSpaceConnectivityManagementApi
  # ConnectivityCallbacksController
  class ConnectivityCallbacksController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # Returns the name and endpoint URL of the callback listening services
    # registered for a given account.
    # @param [String] aname Required parameter: Account name.
    # @return [List of ConnectivityManagementCallback] response from the API call
    def list_registered_callbacks(aname)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/callbacks/{aname}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aname' => { 'value' => aname, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.get(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      decoded.map { |element| ConnectivityManagementCallback.from_hash(element) }
    end

    # You are responsible for creating and running a listening process on your
    # server at that URL.
    # @param [String] aname Required parameter: Account name.
    # @param [RegisterCallbackRequest] body Required parameter: Request to
    # register a callback.
    # @return [CallbackActionResult] response from the API call
    def register_callback(aname,
                          body)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/callbacks/{aname}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aname' => { 'value' => aname, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Content-Type' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      CallbackActionResult.from_hash(decoded)
    end

    # Stops ThingSpace from sending callback messages for the specified account
    # and service.
    # @param [String] aname Required parameter: Account name.
    # @param [String] sname Required parameter: Service name.
    # @return [CallbackActionResult] response from the API call
    def deregister_callback(aname,
                            sname)
      # Prepare query url.
      _query_builder = config.get_base_uri
      _query_builder << '/v1/callbacks/{aname}/name/{sname}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'aname' => { 'value' => aname, 'encode' => true },
        'sname' => { 'value' => sname, 'encode' => true }
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = config.http_client.delete(
        _query_url,
        headers: _headers
      )
      OAuth2.apply(config, _request)
      _response = execute_request(_request)

      # Validate response against endpoint and global error codes.
      case _response.status_code
      when 400
        raise ConnectivityManagementResultException.new(
          'Error response.',
          _response
        )
      end
      validate_response(_response)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_response.raw_body)
      CallbackActionResult.from_hash(decoded)
    end
  end
end
